"use client"

import { useState } from "react"
import {
  ClockIcon,
  MagnifyingGlassIcon,
  FunnelIcon,
  EyeIcon,
  DocumentArrowDownIcon,
  CalendarDaysIcon,
  UserIcon,
} from "@heroicons/react/24/outline"
import AdminLayout from "../../components/AdminLayout"

const medicalHistory = [
  {
    id: 1,
    studentName: "Nguy·ªÖn VƒÉn A",
    class: "6A1",
    date: "2025-01-07",
    type: "medical_event",
    title: "T√© ng√£ trong s√¢n ch∆°i",
    description: "H·ªçc sinh b·ªã t√© ng√£ khi ch∆°i b√≥ng ƒë√°, c√≥ v·∫øt th∆∞∆°ng nh·ªè ·ªü ƒë·∫ßu g·ªëi",
    handledBy: "Y t√° Hoa",
    treatment: "R·ª≠a v·∫øt th∆∞∆°ng, bƒÉng b√≥, theo d√µi",
    outcome: "Kh·ªèi ho√†n to√†n",
    followUp: "Kh√¥ng c·∫ßn theo d√µi th√™m",
  },
  {
    id: 2,
    studentName: "Nguy·ªÖn VƒÉn A",
    class: "6A1",
    date: "2024-12-15",
    type: "checkup",
    title: "Ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥",
    description: "Ki·ªÉm tra s·ª©c kh·ªèe t·ªïng qu√°t h·ªçc k·ª≥ 1",
    handledBy: "BS. Nguy·ªÖn VƒÉn B",
    treatment: "Kh√¥ng c√≥ v·∫•n ƒë·ªÅ s·ª©c kh·ªèe",
    outcome: "S·ª©c kh·ªèe t·ªët",
    followUp: "Ki·ªÉm tra ƒë·ªãnh k·ª≥ ti·∫øp theo",
    height: 155,
    weight: 45,
    vision: "10/10",
    bloodPressure: "110/70",
  },
  {
    id: 3,
    studentName: "Tr·∫ßn Th·ªã B",
    class: "8B2",
    date: "2025-01-05",
    type: "vaccination",
    title: "Ti√™m vaccine HPV",
    description: "Ti√™m vaccine HPV ph√≤ng ch·ªëng ung th∆∞ c·ªï t·ª≠ cung",
    handledBy: "Y t√° Hoa",
    treatment: "Ti√™m vaccine, theo d√µi 30 ph√∫t",
    outcome: "Kh√¥ng c√≥ ph·∫£n ·ª©ng ph·ª•",
    followUp: "Ti√™m m≈©i ti·∫øp theo sau 6 th√°ng",
  },
  {
    id: 4,
    studentName: "L√™ VƒÉn C",
    class: "9C1",
    date: "2024-11-20",
    type: "medicine",
    title: "S·ª≠ d·ª•ng thu·ªëc d·ªã ·ª©ng",
    description: "H·ªçc sinh c√≥ ph·∫£n ·ª©ng d·ªã ·ª©ng th·ª±c ph·∫©m, ƒë∆∞·ª£c cho u·ªëng thu·ªëc",
    handledBy: "Y t√° Mai",
    treatment: "Cho u·ªëng thu·ªëc ch·ªëng d·ªã ·ª©ng, theo d√µi",
    outcome: "Tri·ªáu ch·ª©ng gi·∫£m sau 2 gi·ªù",
    followUp: "Tr√°nh th·ª±c ph·∫©m g√¢y d·ªã ·ª©ng",
  },
  {
    id: 5,
    studentName: "Ph·∫°m Th·ªã D",
    class: "9A3",
    date: "2024-10-10",
    type: "emergency",
    title: "C·∫•p c·ª©u hen suy·ªÖn",
    description: "H·ªçc sinh c√≥ c∆°n hen suy·ªÖn c·∫•p t√≠nh, kh√≥ th·ªü",
    handledBy: "BS. L√™ Th·ªã E",
    treatment: "S·ª≠ d·ª•ng thu·ªëc x·ªãt, g·ªçi c·∫•p c·ª©u, chuy·ªÉn vi·ªán",
    outcome: "·ªîn ƒë·ªãnh sau ƒëi·ªÅu tr·ªã",
    followUp: "Theo d√µi ƒë·ªãnh k·ª≥, mang theo thu·ªëc x·ªãt",
  },
]

const typeLabels = {
  medical_event: "S·ª± ki·ªán y t·∫ø",
  checkup: "Ki·ªÉm tra s·ª©c kh·ªèe",
  vaccination: "Ti√™m ch·ªßng",
  medicine: "S·ª≠ d·ª•ng thu·ªëc",
  emergency: "C·∫•p c·ª©u",
}

const typeColors = {
  medical_event: "bg-orange-100 text-orange-800",
  checkup: "bg-blue-100 text-blue-800",
  vaccination: "bg-purple-100 text-purple-800",
  medicine: "bg-green-100 text-green-800",
  emergency: "bg-red-100 text-red-800",
}

function MedicalHistory() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedType, setSelectedType] = useState("")
  const [selectedStudent, setSelectedStudent] = useState("")
  const [dateFrom, setDateFrom] = useState("")
  const [dateTo, setDateTo] = useState("")
  const [showDetailModal, setShowDetailModal] = useState(false)
  const [selectedRecord, setSelectedRecord] = useState(null)

  // Get unique students for filter
  const students = [...new Set(medicalHistory.map((record) => record.studentName))].sort()

  const filteredHistory = medicalHistory.filter((record) => {
    const matchesSearch =
      record.studentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.description.toLowerCase().includes(searchTerm.toLowerCase())

    const matchesType = !selectedType || record.type === selectedType
    const matchesStudent = !selectedStudent || record.studentName === selectedStudent

    const recordDate = new Date(record.date)
    const matchesDateFrom = !dateFrom || recordDate >= new Date(dateFrom)
    const matchesDateTo = !dateTo || recordDate <= new Date(dateTo)

    return matchesSearch && matchesType && matchesStudent && matchesDateFrom && matchesDateTo
  })

  const handleViewDetail = (record) => {
    setSelectedRecord(record)
    setShowDetailModal(true)
  }

  const handleExportHistory = (studentName) => {
    console.log("Export history for:", studentName)
    // Implement export functionality
  }

  const getStudentHistory = (studentName) => {
    return medicalHistory.filter((record) => record.studentName === studentName)
  }

  return (
    <AdminLayout>
      <div className="p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
                  <ClockIcon className="w-8 h-8 text-pink-600" />
                  L·ªãch s·ª≠ y t·∫ø
                </h1>
                <p className="text-gray-600 mt-1">Theo d√µi l·ªãch s·ª≠ y t·∫ø chi ti·∫øt c·ªßa t·ª´ng h·ªçc sinh</p>
              </div>
              <button
                onClick={() => handleExportHistory("all")}
                className="bg-pink-600 text-white px-4 py-2 rounded-lg hover:bg-pink-700 flex items-center gap-2"
              >
                <DocumentArrowDownIcon className="w-5 h-5" />
                Xu·∫•t b√°o c√°o
              </button>
            </div>
          </div>

          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-6">
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">T·ªïng h·ªì s∆°</p>
                  <p className="text-2xl font-bold text-gray-900">{medicalHistory.length}</p>
                </div>
                <ClockIcon className="w-8 h-8 text-pink-500" />
              </div>
            </div>
            {Object.entries(typeLabels).map(([type, label]) => (
              <div key={type} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">{label}</p>
                    <p className="text-2xl font-bold text-gray-900">
                      {medicalHistory.filter((record) => record.type === type).length}
                    </p>
                  </div>
                  <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${typeColors[type]}`}>
                    {type === "checkup" && <CalendarDaysIcon className="w-5 h-5" />}
                    {type === "vaccination" && <span className="text-sm font-bold">üíâ</span>}
                    {type === "medicine" && <span className="text-sm font-bold">üíä</span>}
                    {type === "medical_event" && <span className="text-sm font-bold">üè•</span>}
                    {type === "emergency" && <span className="text-sm font-bold">üö®</span>}
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Filters */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6">
            <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
              <div className="relative">
                <MagnifyingGlassIcon className="w-5 h-5 absolute left-3 top-3 text-gray-400" />
                <input
                  type="text"
                  placeholder="T√¨m ki·∫øm..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
              <select
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                value={selectedStudent}
                onChange={(e) => setSelectedStudent(e.target.value)}
              >
                <option value="">T·∫•t c·∫£ h·ªçc sinh</option>
                {students.map((student) => (
                  <option key={student} value={student}>
                    {student}
                  </option>
                ))}
              </select>
              <select
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                value={selectedType}
                onChange={(e) => setSelectedType(e.target.value)}
              >
                <option value="">T·∫•t c·∫£ lo·∫°i</option>
                {Object.entries(typeLabels).map(([key, label]) => (
                  <option key={key} value={key}>
                    {label}
                  </option>
                ))}
              </select>
              <input
                type="date"
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                value={dateFrom}
                onChange={(e) => setDateFrom(e.target.value)}
                placeholder="T·ª´ ng√†y"
              />
              <input
                type="date"
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                value={dateTo}
                onChange={(e) => setDateTo(e.target.value)}
                placeholder="ƒê·∫øn ng√†y"
              />
              <div className="flex items-center text-sm text-gray-600">
                <FunnelIcon className="w-4 h-4 mr-2" />
                T√¨m th·∫•y {filteredHistory.length} h·ªì s∆°
              </div>
            </div>
          </div>

          {/* History Table */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      H·ªçc sinh
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ng√†y
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Lo·∫°i
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      N·ªôi dung
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ng∆∞·ªùi x·ª≠ l√Ω
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      K·∫øt qu·∫£
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      H√†nh ƒë·ªông
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredHistory.map((record) => (
                    <tr key={record.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{record.studentName}</div>
                          <div className="text-sm text-gray-500">L·ªõp {record.class}</div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{record.date}</td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${typeColors[record.type]}`}
                        >
                          {typeLabels[record.type]}
                        </span>
                      </td>
                      <td className="px-6 py-4">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{record.title}</div>
                          <div className="text-sm text-gray-500 truncate max-w-xs">{record.description}</div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{record.handledBy}</td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{record.outcome}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex justify-end gap-2">
                          <button
                            onClick={() => handleViewDetail(record)}
                            className="text-blue-600 hover:text-blue-900 p-1"
                            title="Xem chi ti·∫øt"
                          >
                            <EyeIcon className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleExportHistory(record.studentName)}
                            className="text-green-600 hover:text-green-900 p-1"
                            title="Xu·∫•t h·ªì s∆°"
                          >
                            <DocumentArrowDownIcon className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Student Summary Cards */}
          <div className="mt-8">
            <h2 className="text-xl font-bold text-gray-900 mb-4">T√≥m t·∫Øt theo h·ªçc sinh</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {students.slice(0, 6).map((student) => {
                const studentRecords = getStudentHistory(student)
                const latestRecord = studentRecords[0]
                return (
                  <div key={student} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-pink-100 rounded-full flex items-center justify-center">
                          <UserIcon className="w-5 h-5 text-pink-600" />
                        </div>
                        <div>
                          <h3 className="font-semibold text-gray-900">{student}</h3>
                          <p className="text-sm text-gray-500">{studentRecords.length} h·ªì s∆°</p>
                        </div>
                      </div>
                      <button
                        onClick={() => handleExportHistory(student)}
                        className="text-pink-600 hover:text-pink-900 p-1"
                        title="Xu·∫•t h·ªì s∆°"
                      >
                        <DocumentArrowDownIcon className="w-4 h-4" />
                      </button>
                    </div>
                    {latestRecord && (
                      <div className="space-y-2">
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-gray-600">G·∫ßn nh·∫•t:</span>
                          <span className="text-sm text-gray-900">{latestRecord.date}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-gray-600">Lo·∫°i:</span>
                          <span
                            className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${typeColors[latestRecord.type]}`}
                          >
                            {typeLabels[latestRecord.type]}
                          </span>
                        </div>
                        <p className="text-sm text-gray-700 truncate">{latestRecord.title}</p>
                      </div>
                    )}
                  </div>
                )
              })}
            </div>
          </div>
        </div>
      </div>

      {/* Detail Modal */}
      {showDetailModal && selectedRecord && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 w-full max-w-3xl max-h-[90vh] overflow-y-auto">
            <h3 className="text-lg font-semibold mb-4">Chi ti·∫øt h·ªì s∆° y t·∫ø</h3>
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">H·ªçc sinh</label>
                  <p className="text-sm text-gray-900">
                    {selectedRecord.studentName} - L·ªõp {selectedRecord.class}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Ng√†y</label>
                  <p className="text-sm text-gray-900">{selectedRecord.date}</p>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Lo·∫°i</label>
                  <span
                    className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${typeColors[selectedRecord.type]}`}
                  >
                    {typeLabels[selectedRecord.type]}
                  </span>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Ng∆∞·ªùi x·ª≠ l√Ω</label>
                  <p className="text-sm text-gray-900">{selectedRecord.handledBy}</p>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Ti√™u ƒë·ªÅ</label>
                <p className="text-sm text-gray-900">{selectedRecord.title}</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">M√¥ t·∫£</label>
                <p className="text-sm text-gray-900">{selectedRecord.description}</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">C√°ch x·ª≠ l√Ω</label>
                <p className="text-sm text-gray-900">{selectedRecord.treatment}</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">K·∫øt qu·∫£</label>
                <p className="text-sm text-gray-900">{selectedRecord.outcome}</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Theo d√µi</label>
                <p className="text-sm text-gray-900">{selectedRecord.followUp}</p>
              </div>

              {/* Health metrics if available */}
              {selectedRecord.height && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Ch·ªâ s·ªë s·ª©c kh·ªèe</label>
                  <div className="grid grid-cols-4 gap-4 bg-gray-50 p-4 rounded-lg">
                    <div>
                      <p className="text-xs text-gray-600">Chi·ªÅu cao</p>
                      <p className="text-sm font-semibold">{selectedRecord.height} cm</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-600">C√¢n n·∫∑ng</p>
                      <p className="text-sm font-semibold">{selectedRecord.weight} kg</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-600">Th·ªã l·ª±c</p>
                      <p className="text-sm font-semibold">{selectedRecord.vision}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-600">Huy·∫øt √°p</p>
                      <p className="text-sm font-semibold">{selectedRecord.bloodPressure}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="flex justify-end gap-3 mt-6">
              <button
                onClick={() => setShowDetailModal(false)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                ƒê√≥ng
              </button>
              <button
                onClick={() => handleExportHistory(selectedRecord.studentName)}
                className="px-4 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700"
              >
                Xu·∫•t h·ªì s∆°
              </button>
            </div>
          </div>
        </div>
      )}
    </AdminLayout>
  )
}

export default MedicalHistory
